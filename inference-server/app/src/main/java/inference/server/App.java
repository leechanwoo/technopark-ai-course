/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inference.server;

import io.grpc.Grpc;
import io.grpc.InsecureServerCredentials;
import io.grpc.Server;
import io.grpc.ServerBuilder;


import ai.onnxruntime.NodeInfo;
import ai.onnxruntime.TensorInfo;
import ai.onnxruntime.OnnxTensor;
import ai.onnxruntime.OrtEnvironment;
import ai.onnxruntime.OrtException;
import ai.onnxruntime.OrtSession;
import ai.onnxruntime.OrtSession.Result;
import ai.onnxruntime.OrtSession.SessionOptions;
import ai.onnxruntime.OrtSession.SessionOptions.OptLevel;

import java.io.IOException;
import java.util.Collections;


import com.example.GrpcTest;
import com.example.HelloServiceGrpc;

import com.example.Prediction;
import com.example.PredictionServiceGrpc;
import com.example.Prediction.ImageData;
import com.example.Prediction.CategoricalResult;


public class App {

    public static void main(String[] args) {

        // Server server = ServerBuilder.forPort(50051) // Specify the port to listen on
        Server server = Grpc.newServerBuilderForPort(50051, InsecureServerCredentials.create())
                .addService(new HelloServiceImpl()) // Register your service implementation
                .addService(new PredictionServiceImpl())
                .build();

        try {
            // Start the gRPC server
            server.start();

            System.out.println("Server started and listening on port 50051");

            // Block until the server is shut down
            server.awaitTermination();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    static class PredictionServiceImpl extends PredictionServiceGrpc.PredictionServiceImplBase {
        @Override
        public void imagePrediction(
            ImageData image,
            io.grpc.stub.StreamObserver<CategoricalResult> responseObserver) {
            
            // Implement your server-side logic here
            // String message = "Hello, " + request.getName();
            // System.out.println(message);
            try { 
                onnxRunner();
            } catch (Exception e) {
                e.printStackTrace();
            }

            System.out.println(image.getData().length());

            // Build and send the response
            CategoricalResult response = CategoricalResult.newBuilder() 
                                                          .setResult("The result of cnn inference")
                                                          .build();

            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }


        private void onnxRunner() throws OrtException, IOException {
            OrtEnvironment env = OrtEnvironment.getEnvironment();

            OrtSession.SessionOptions opts = new SessionOptions();
            opts.setOptimizationLevel(OptLevel.BASIC_OPT);

            OrtSession session = env.createSession("src/main/resources/mobilenetv2-10.onnx", opts);

            TensorInfo inputTensorInfo = (TensorInfo) session.getInputInfo().get("input").getInfo();
            long[] shape = inputTensorInfo.getShape();

            String inputName = session.getInputNames().iterator().next();

            // Input data
            float[][][][] testData = new float[1][(int) shape[1]][(int) shape[2]][(int) shape[3]];
            for (float[][][] dim : testData) {
                for (float[][] channels : dim) {
                    for (float[] rows : channels) {
                        for (float elem : rows) {
                            elem = 0;
                        }
                    }
                }
            }

            OnnxTensor test = OnnxTensor.createTensor(env, testData);
            // ----

            Result output = session.run(Collections.singletonMap(inputName, test));
            float[][] probs = (float[][]) output.get(0).getValue();
            for (float p : probs[0]) {
                System.out.println(p);
            }
        }
    }


    static class HelloServiceImpl extends HelloServiceGrpc.HelloServiceImplBase {
        @Override
        public void sayHello(
            GrpcTest.HelloRequest request,
            io.grpc.stub.StreamObserver<GrpcTest.HelloResponse> responseObserver) {
            
            // Implement your server-side logic here
            String message = "Hello, " + request.getName();
            System.out.println(message);

            // Build and send the response
            GrpcTest.HelloResponse response = GrpcTest.HelloResponse
                .newBuilder()
                .setGreeting(message)
                .build();

            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }
    }


}
